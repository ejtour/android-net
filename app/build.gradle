apply plugin: 'com.android.application'

def gitVersion
task getGitCommits {
    def out = new ByteArrayOutputStream()
    def cmd = "cd $rootDir && git rev-list HEAD --count"
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        exec {
            ExecSpec execSpec ->
                executable 'cmd'
                args '/c', cmd
                standardOutput = out
        }
    }else {
        exec {
            ExecSpec execSpec ->
                executable 'bash'
                args '-c', cmd
                standardOutput = out
        }
    }
    gitVersion = out.toString().trim().toInteger()
}

android {
    compileSdkVersion COMPILESDKVERSION as int
    defaultConfig {
        applicationId "com.hll_sc_app"
        minSdkVersion MINSDKVERSION as int
        targetSdkVersion TARGETSDKVERSION as int
        versionCode gitVersion
        versionName "3.36.2"
        multiDexEnabled true
        flavorDimensions "default"
        packagingOptions {
            exclude 'META-INF/services/javax.annotation.processing.Processor'
            exclude 'META-INF/LICENSE'
            exclude 'META-INF/NOTICE'
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
        resConfigs "zh"
        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a'
        }
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    signingConfigs {
        release {
            storeFile file('22citysupply.keystore')
            storePassword STOREPASSWORD
            keyAlias KEYALIAS
            keyPassword KEYPASSWORD
        }
    }

    buildTypes {
        release {
            buildConfigField "boolean", "isDebug", "false"
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            applicationIdSuffix ".beta"
            buildConfigField "boolean", "isDebug", "true"
            signingConfig signingConfigs.release
        }
    }

    productFlavors {
        official {
            buildConfigField "String", "ODM_NAME", '"二十二城"'
            buildConfigField "boolean", "isOdm", "false"
        }

        odm0 { // odm 演示版本，各种 key 适用于正式版
            applicationId "com.odm_sc_app.beta"
            buildConfigField "String", "ODM_NAME", '"ODM演示"'
            buildConfigField "boolean", "isOdm", "true"
        }

        odm1 { // odm 测试版本 各种 key 适用于测试版
            applicationId "com.odm_sc_app"
            buildConfigField "String", "ODM_NAME", '"ODM测试"'
            buildConfigField "boolean", "isOdm", "true"
        }

        odm2 {
            applicationId "com.odm_sc_app_2"
            buildConfigField "String", "ODM_NAME", '"立蚂送"'
            buildConfigField "boolean", "isOdm", "true"
        }

        odm3 {
            applicationId "com.odm_sc_app_3"
            buildConfigField "String", "ODM_NAME", '"天福号"'
            buildConfigField "boolean", "isOdm", "true"
        }

        odm4 {
            applicationId "com.odm_sc_app_4"
            buildConfigField "String", "ODM_NAME", '"聊粮"'
            buildConfigField "boolean", "isOdm", "true"
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        if (variant.buildType.name == "release"){
            if (names.contains("odm1") || names.contains("odm0")){ // 不需要演示包时，忽略 odm0
                setIgnore(true)
            }
        }
        if (variant.buildType.name == "debug") {
            if (!names.contains("odm1") && !names.contains("official")) {
                setIgnore(true)
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        disable 'GoogleAppIndexingWarning'
        disable 'UseAppTint'
    }

    configurations {
        all {
            exclude group: 'xpp3', module: 'xpp3'
        }
    }
}


configurations {
    ftpAntTask
}

private static String getApkName(variant) {
    def prefix
    switch (variant.flavorName) {
        case "odm4":
            prefix = "ll"
            break
        case "odm3":
            prefix = "tfh"
            break
        case "odm2":
            prefix = "lms"
            break
        default:
            prefix = "22city"
            break
    }
    "${prefix}_sc_v${variant.versionName}"
}

afterEvaluate {
    assembleRelease.doLast {
        def debugFlavors = ["odm0", "odm1"]
        android.applicationVariants.all { variant ->
            def outputApkName = getApkName(variant)
            if (variant.buildType.name.equalsIgnoreCase("release") && !debugFlavors.contains(variant.flavorName)) {
                copy {
                    def destPath = "${buildDir}/supplier-apk/${variant.versionName}"
                    from variant.outputs.first().outputFile
                    into destPath
                    rename { String fileName ->
                        fileName.endsWith(".apk") ? "${outputApkName}.apk" : fileName
                    }

                    from "${buildDir}/outputs/mapping/${variant.flavorName}Release/mapping.txt"
                    into destPath
                    rename { String fileName ->
                        fileName.replace("mapping.txt", "${outputApkName}_mapping.txt")
                    }

                    from "${buildDir}/intermediates/runtime_symbol_list/${variant.flavorName}Release/R.txt"
                    into destPath
                    rename { String fileName ->
                        fileName.replace("R.txt", "${outputApkName}_R.txt")
                    }
                }
            }
        }
    }
}

dependencies {
    implementation project(':base')
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.google.zxing:core:3.4.1'
    testImplementation 'junit:junit:4.13.2'
    // noinspection GradleCompatible
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    // ButterKnife
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.3'
    implementation 'com.jakewharton:butterknife:10.2.3'
    // arouter
    annotationProcessor 'com.alibaba:arouter-compiler:1.5.2'
    //chart插件
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    // switchbutton
    implementation 'com.kyleduo.switchbutton:library:2.0.0'

    //微信sdk
    implementation 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:+'
    //qq sdk
    implementation 'com.tencent.tauth:qqopensdk:3.52.0'

    //圆角textview
    implementation 'com.github.QQzs:BorderView:1.0.6'

    // IM
    implementation 'org.igniterealtime.smack:smack-tcp:4.4.2'
    implementation 'org.igniterealtime.smack:smack-android-extensions:4.4.2'
    implementation 'cn.jiguang.imui:messagelist:0.8.0'
    implementation 'cn.jiguang.imui:chatinput:0.10.0'

    // bugly-upgrade
    implementation 'com.tencent.bugly:crashreport_upgrade:1.6.1'

    implementation 'top.zibin:Luban:1.1.8'

    implementation 'com.aliyun.dpa:oss-android-sdk:+'
    // 角标
    implementation 'me.leolin:ShortcutBadger:1.1.22@aar'

    // 地图
    implementation 'com.amap.api:3dmap:+'

    // 跳房子升级
    implementation 'com.hualala.supplychain.android:upgrade:0.0.2-SNAPSHOT'
    // core
    implementation 'com.liulishuo.okdownload:okdownload:1.0.5'
    // provide sqlite to store breakpoints
    implementation 'com.liulishuo.okdownload:sqlite:1.0.5'
    // provide okhttp to connect to backend
    implementation 'com.liulishuo.okdownload:okhttp:1.0.5'

    ftpAntTask "org.apache.ant:ant-commons-net:1.10.12"
}

task uploadReleaseToFtp {
    dependsOn 'assembleRelease'
    doLast {
        ant {
            taskdef(name: 'ftp',
                    classname: 'org.apache.tools.ant.taskdefs.optional.net.FTP',
                    classpath: configurations.ftpAntTask.asPath)
            ftp(action: "mkdir",
                    server: "223.202.132.10",
                    userid: "hualala",
                    password: "hualala",
                    remoteDir: "/hualala/mall/supplier_android")
            ftp(server: "223.202.132.10",
                    userid: "hualala",
                    password: "hualala",
                    remoteDir: "/hualala/mall/supplier_android") {
                fileset(dir: "${buildDir}/supplier-apk")
            }
        }
    }
}
